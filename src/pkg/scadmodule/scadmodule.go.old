package scadmodule

import (
	"fmt"
	"path"
	"regexp"
)

type SCADModule struct {
	name string
}

func (s SCADModule) Name() string {
	return s.name
}

func (s SCADModule) ModuleName() (moduleName string, ok bool) {
	moduleName = s.Name
	if moduleName == "" {
		// default to class name of the calling object
		// not sure this will work with SCADModule being embedded in another object
		//typeComponents := strings.Split(fmt.Sprintf("%T", s), ".")
		//moduleName = typeComponents[len(typeComponents)-1]
		moduleName = fmt.Sprintf("%T", s)
	}

	ok = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]*$").MatchString(moduleName)
	return
}

// the match for module name validity is performed when asked for its filename
// the module name's validity doesn't even mean anything until it's attempted
// to be written disk
func (s SCADModule) filename() (filename string, ok bool) {
	// "ok" will be returned as returned by s.ModuleName()
	moduleName, ok := s.ModuleName()
	filename = fmt.Sprintf("%s.scad", moduleName)
	return
}

func (s SCADModule) filepath(outputPath string, filename string) string {
	return path.Join(outputPath, filename)
}

func (s SCADModule) Render(outputPath string) bool {
	// dummy use of outputPath to avoid warnings
	if outputPath == "" {
		return false
	}

	return true
}
